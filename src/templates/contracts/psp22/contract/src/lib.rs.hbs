#![cfg_attr(not(feature = "std"), no_std, no_main)]

#[openbrush::implementation(PSP22)]
#[openbrush::contract]
pub mod {{contract_name_snake}} {
    use ink::codegen::{Env, EmitEvent};
    use openbrush::traits::Storage;

    #[ink(event)]
    pub struct TransferEvent {
        #[ink(topic)]
        from: Option<AccountId>,
        #[ink(topic)]
        to: Option<AccountId>,
        value: Balance,
    }

    #[ink(event)]
    pub struct ApprovalEvent {
        #[ink(topic)]
        owner: AccountId,
        #[ink(topic)]
        spender: AccountId,
        value: Balance,
    }

    #[ink(storage)]
    #[derive(Storage)]
    pub struct {{contract_name_pascal}} {
        #[storage_field]
        psp22: psp22::Data,
    }

    #[overrider(psp22::Internal)]
    fn _emit_transfer_event(
        &self,
        from: Option<AccountId>,
        to: Option<AccountId>,
        amount: Balance,
    ) {
        self.env().emit_event(TransferEvent {
            from,
            to,
            value: amount,
        });
    }

    #[overrider(psp22::Internal)]
    fn _emit_approval_event(&self, owner: AccountId, spender: AccountId, amount: Balance) {
        self.env().emit_event(ApprovalEvent {
            owner,
            spender,
            value: amount,
        });
    }

    impl {{contract_name_pascal}} {
        #[ink(constructor)]
        pub fn new(total_supply: Balance) -> Self {
            let mut instance = Self {
                psp22: Default::default()
            };
            Internal::_mint_to(&mut instance, Self::env().caller(), total_supply).expect("Should mint");
            instance
        }

        #[ink(message)]
        pub fn get_total_supply(&self) -> Balance {
            PSP22::total_supply(self)
        }
    }

    #[cfg(all(test, feature = "e2e-tests"))]
    pub mod tests {
        use super::*;
        use ink_e2e::{
            build_message,
        };
        use openbrush::contracts::psp22::psp22_external::PSP22;
        use test_helpers::{
            address_of,
            balance_of,
        };

        type E2EResult<T> = Result<T, Box<dyn std::error::Error>>;

        #[ink_e2e::test]
        async fn assigns_initial_balance(mut client: ink_e2e::Client<C, E>) -> E2EResult<()> {
            let constructor = {{contract_name_pascal}}Ref::new(100);
            let address = client
                .instantiate("{{contract_name_snake}}", &ink_e2e::alice(), constructor, 0, None)
                .await
                .expect("instantiate failed")
                .account_id;

            let result = {
                let _msg = build_message::<{{contract_name_pascal}}Ref>(address.clone())
                    .call(|contract| contract.balance_of(address_of!(Alice)));
                client.call_dry_run(&ink_e2e::alice(), &_msg, 0, None).await
            };

            assert!(matches!(result.return_value(), 100));

            Ok(())
        }

        #[ink_e2e::test]
        async fn transfer_adds_amount_to_destination_account(mut client: ink_e2e::Client<C, E>) -> E2EResult<()> {
            let constructor = {{contract_name_pascal}}Ref::new(100);
            let address = client
                .instantiate("{{contract_name_snake}}", &ink_e2e::alice(), constructor, 0, None)
                .await
                .expect("instantiate failed")
                .account_id;

            let result = {
                let _msg = build_message::<{{contract_name_pascal}}Ref>(address.clone())
                    .call(|contract| contract.transfer(address_of!(Bob), 50, vec![]));
                client
                    .call(&ink_e2e::alice(), _msg, 0, None)
                    .await
                    .expect("transfer failed")
            };

            assert!(matches!(result.return_value(), Ok(())));

            let balance_of_alice = balance_of!({{contract_name_pascal}}Ref, client, address, Alice);

            let balance_of_bob = balance_of!({{contract_name_pascal}}Ref, client, address, Bob);

            assert_eq!(balance_of_bob, 50, "Bob should have 50 tokens");
            assert_eq!(balance_of_alice, 50, "Alice should have 50 tokens");

            Ok(())
        }

        #[ink_e2e::test]
        async fn cannot_transfer_above_the_amount(mut client: ink_e2e::Client<C, E>) -> E2EResult<()> {
            let constructor = {{contract_name_pascal}}Ref::new(100);
            let address = client
                .instantiate("{{contract_name_snake}}", &ink_e2e::alice(), constructor, 0, None)
                .await
                .expect("instantiate failed")
                .account_id;

            let result = {
                let _msg = build_message::<{{contract_name_pascal}}Ref>(address.clone())
                    .call(|contract| contract.transfer(address_of!(Bob), 101, vec![]));
                client.call_dry_run(&ink_e2e::alice(), &_msg, 0, None).await
            };

            assert!(matches!(result.return_value(), Err(PSP22Error::InsufficientBalance)));

            Ok(())
        }
    }
}
